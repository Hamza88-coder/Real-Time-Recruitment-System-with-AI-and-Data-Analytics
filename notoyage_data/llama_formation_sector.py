# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ImXqXfy1co_RscN-lvUoMvNA8pXopOZ0
"""

import pandas as pd

# Correcting the mismatch in data lengths
data_corrected = {
    "ID": range(1, 46),  # Adjusting the range to match the length of the training list (1 to 45 inclusive)
    "Training": [
        "Agronomy",
        "Electrical Engineering",
        "Architecture",
        "Medicine",
        "Computer Science",
        "Finance",
        "Management",
        "Law",
        "Marketing",
        "Civil Engineering",
        "Chemistry",
        "Aeronautics",
        "Logistics",
        "Urban Planning",
        "Mechanical Engineering",
        "Pharmacy",
        "Biotechnologies",
        "Renewable Energies",
        "Audiovisual",
        "Tourism",
        "Hospitality",
        "Design",
        "Multimedia",
        "Data Science",
        "Artificial Intelligence",
        "Actuarial Science",
        "Petroleum Engineering",
        "Production and Automation",
        "Electronics",
        "Communication",
        "Environmental Sciences",
        "Cosmetics",
        "Agri-food",
        "Networks and Systems",
        "Business Administration",
        "Chemical Engineering",
        "Social Sciences",
        "Psychology",
        "Industrial Engineering",
        "Software Development",
        "Digital Marketing",
        "Human Resources Management",
        "Electromechanics",
        "Energy Engineering",
        "Materials Science"
    ]
}

# Create a DataFrame
df_corrected = pd.DataFrame(data_corrected)

# Save to an Excel file
file_path_corrected = "Training_List_Corrected.xlsx"
df_corrected.to_excel(file_path_corrected, index=False)

print(f"Excel file '{file_path_corrected}' has been created successfully.")

import pandas as pd

# Liste des secteurs
secteurs = {
    "ID_Secteur": list(range(1, 205)),  # IDs des secteurs de 1 à 204
    "Nom_Secteur": [
        "Diversified", "Financial Services", "Insurance", "Energy", "Infrastructure", "Logistics",
        "Transportation", "Media & Entertainment", "Food and Beverage", "Telecommunications",
        "Manufacturing", "Pharmaceuticals", "Industrial", "Conglomerate", "Financials",
        "Travel and Leisure", "Elevators & Escalators", "Energy/Oil and Gas",
        "Information Technology", "Utilities", "Engineering", "Airlines", "Healthcare",
        "Real Estate", "Hospitality/Hotels", "Technology", "IT Services", "Consumer Goods",
        "Technology/Music Streaming", "Automotive", "Media", "Beauty/Cosmetics", "Chemicals",
        "Tobacco", "HVAC/Industrial", "Entertainment/Media Streaming", "Banking", "Aluminum",
        "Food & Beverages", "Electronics", "Real Estate/Property Development",
        "Waste Management", "Hospitality", "Retail", "Beverage", "Advertising & Marketing",
        "Aerospace & Defense", "Beauty", "Technology and Entertainment", "Food",
        "Construction/Infrastructure", "Healthcare Technology", "Technology and Software",
        "Technology/IT Services", "Financial Services/Investment Management",
        "Aerospace and Defense", "Agriculture", "Real Estate/Construction",
        "Financial Services/Investment Banking", "Automotive Parts", "Equipment Rental",
        "Travel/Cruise Lines", "Renewable Energy", "Technology and Safety", "Industrial Conglomerates",
        "Food & Confectionery", "Industrial Gases", "Metals and Mining", "Construction and Engineering",
        "Travel and Booking", "Food and Agriculture", "Gambling and Gaming", "Packaging",
        "Restaurants", "Beverages", "Health Care", "E-commerce/Online Marketplace",
        "Fashion and Apparel", "Cement & Aggregates", "Food & Beverage", "Home Construction",
        "Oil & Gas", "Publishing and Events", "Metals", "Transportation/Airlines",
        "Mining and Metals/Aluminum", "Mining and Metals", "Entertainment", "Motion & Control",
        "Business Services", "Mining", "Consumer Discretionary", "Technology and Networking",
        "Mining and Energy", "Aviation and Travel", "Services", "Education and Technology",
        "Oil and Gas Services", "Building Materials & Equipment", "Tools & Equipment",
        "Technology and Security", "Aerospace/Building Systems", "Travel & Hospitality",
        "Technology and Search", "Healthcare Services", "Transportation/Logistics",
        "Industrials", "E-commerce", "Financial Technology", "Building Materials",
        "Financial Services/Remittances", "Appliances", "Construction", "Postal Services",
        "Mining and Metals/Gold", "Construction/Building Materials", "IT Consulting",
        "Telecom & Cable", "Asset Management", "Steel & Metals", "Financial Technology/Payments",
        "Oil and Gas", "Shipping and Logistics", "Technology and Engineering", "Electrical Wholesale",
        "Chemicals and Energy", "Materials", "Mining and Metals/Coal", "Semiconductor",
        "Mining and Metals/Manufacturing", "Healthcare/Hospitals", "Water & Hygiene",
        "Industrial Supplies", "Transportation and Rail", "Real Estate/Logistics",
        "Professional Services", "Wholesale & Retail", "Entertainment/Media",
        "Consumer Goods/Homecare", "Communication Equipment", "Construction & Engineering",
        "Semiconductors", "Software and Technology", "Rental & Leasing Services",
        "Retail and Conglomerate", "Natural Gas", "Fertilizers", "Paints & Coatings",
        "Hospitality and Entertainment", "Specialty Chemicals", "Technology and Electronics",
        "Beverage/Alcohol", "Lighting and Technology", "Entertainment/Gaming", "Software",
        "Advertising and Marketing", "Aerospace/Defense", "Technology/Software",
        "Media and Entertainment", "Rental Cars", "Technology/Internet", "Food Services",
        "Apparel", "Medical Devices", "Flavors & Fragrances", "Flavor and Fragrances",
        "Apparel and Footwear", "Lubricants", "Data and Analytics", "Banking/Financial Services",
        "Engineering and Construction", "Medical Technology", "Recreational Vehicles",
        "Transportation/Airports", "Manufacturing/Building Systems", "Gambling",
        "Transportation/Railways", "Electrical Equipment", "Automotive/Motorcycles",
        "Lab Equipment", "Industrial Machinery", "Energy/Infrastructure",
        "Communication Services", "Equipment Rentals", "Healthcare/Technology",
        "Online Job Search", "Transportation/Ridesharing", "Payroll & HR Services",
        "Telecommunications/Radio", "Biotechnology", "Engineering Services", "Staffing",
        "Retail/Home Improvement", "Food and Beverage/Confectionery", "Testing and Certification",
        "Engineering & Construction", "Timber & Paper", "Agrochemicals",
        "Transportation/Infrastructure", "Electrical/Industrial", "Appliances and Electronics",
        "Food and Beverage/Spices", "Technology and Telecommunications", "Flooring"
    ]
}

# Liste des formations
formations = {
    "ID_Formation": range(1, 46),  # IDs des formations de 1 à 45
    "Nom_Formation": [
        "Agronomy", "Electrical Engineering", "Architecture", "Medicine", "Computer Science",
        "Finance", "Management", "Law", "Marketing", "Civil Engineering", "Chemistry",
        "Aeronautics", "Logistics", "Urban Planning", "Mechanical Engineering", "Pharmacy",
        "Biotechnologies", "Renewable Energies", "Audiovisual", "Tourism", "Hospitality",
        "Design", "Multimedia", "Data Science", "Artificial Intelligence", "Actuarial Science",
        "Petroleum Engineering", "Production and Automation", "Electronics", "Communication",
        "Environmental Sciences", "Cosmetics", "Agri-food", "Networks and Systems",
        "Business Administration", "Chemical Engineering", "Social Sciences", "Psychology",
        "Industrial Engineering", "Software Development", "Digital Marketing",
        "Human Resources Management", "Electromechanics", "Energy Engineering",
        "Materials Science"
    ]
}

# Associer chaque secteur à une formation arbitrairement
secteurs_formations = {
    "ID_Secteur": secteurs["ID_Secteur"],
    "Nom_Secteur": secteurs["Nom_Secteur"],
    "ID_Formation": [i % 45 + 1 for i in secteurs["ID_Secteur"]],  # Associer un ID_Formation de façon cyclique
    "Nom_Formation": [formations["Nom_Formation"][i % 45] for i in secteurs["ID_Secteur"]]
}

# Convertir en DataFrame
df_secteurs_formations = pd.DataFrame(secteurs_formations)

# Sauvegarder dans un fichier Excel
df_secteurs_formations.to_excel("Secteurs_Formation.xlsx", index=False)

print("Le fichier 'Secteurs_Formation.xlsx' a été créé avec succès.")

import pandas as pd

# Liste des formations avec une association logique
formations = [
    (1, "Agronomy"),
    (2, "Finance"),
    (3, "Insurance"),
    (4, "Energy Engineering"),
    (5, "Civil Engineering"),
    (6, "Logistics"),
    (7, "Transportation"),
    (8, "Audiovisual"),
    (9, "Agri-food"),
    (10, "Telecommunications"),
    (11, "Industrial Engineering"),
    (12, "Pharmacy"),
    (13, "Mechanical Engineering"),
    (14, "Management"),
    (15, "Actuarial Science"),
    (16, "Tourism"),
    (17, "Electromechanics"),
    (18, "Petroleum Engineering"),
    (19, "Computer Science"),
    (20, "Utilities"),
    (21, "Architecture"),
    (22, "Aeronautics"),
    (23, "Medicine"),
    (24, "Urban Planning"),
    (25, "Hospitality"),
    (26, "Artificial Intelligence"),
    (27, "Networks and Systems"),
    (28, "Consumer Goods"),
    (29, "Multimedia"),
    (30, "Automotive"),
    (31, "Communication"),
    (32, "Cosmetics"),
    (33, "Chemical Engineering"),
    (34, "Environmental Sciences"),
    (35, "HVAC/Industrial"),
    (36, "Entertainment/Media Streaming"),
    (37, "Banking"),
    (38, "Materials Science"),
    (39, "Food & Beverages"),
    (40, "Electronics"),
    (41, "Real Estate"),
    (42, "Waste Management"),
    (43, "Hospitality/Hotels"),
    (44, "Digital Marketing"),
    (45, "Advertising and Marketing"),
]

# Liste des secteurs
secteurs = [
    (1, "Diversified"),
    (2, "Financial Services"),
    (3, "Insurance"),
    (4, "Energy"),
    (5, "Infrastructure"),
    (6, "Logistics"),
    (7, "Transportation"),
    (8, "Media & Entertainment"),
    (9, "Food and Beverage"),
    (10, "Telecommunications"),
    (11, "Manufacturing"),
    (12, "Pharmaceuticals"),
    (13, "Industrial"),
    (14, "Conglomerate"),
    (15, "Financials"),
    (16, "Travel and Leisure"),
    (17, "Elevators & Escalators"),
    (18, "Energy/Oil and Gas"),
    (19, "Information Technology"),
    (20, "Utilities"),
    (21, "Engineering"),
    (22, "Airlines"),
    (23, "Healthcare"),
    (24, "Real Estate"),
    (25, "Hospitality/Hotels"),
    (26, "Technology"),
    (27, "IT Services"),
    (28, "Consumer Goods"),
    (29, "Technology/Music Streaming"),
    (30, "Automotive"),
    (31, "Media"),
    (32, "Beauty/Cosmetics"),
    (33, "Chemicals"),
    (34, "Tobacco"),
    (35, "HVAC/Industrial"),
    (36, "Entertainment/Media Streaming"),
    (37, "Banking"),
    (38, "Aluminum"),
    (39, "Food & Beverages"),
    (40, "Electronics"),
    (41, "Real Estate/Property Development"),
    (42, "Waste Management"),
    (43, "Hospitality"),
    (44, "Retail"),
    (45, "Beverage"),
]

# Correspondance logique des secteurs avec les formations
correspondance = [
    {
        "ID Secteur": secteur[0],
        "Nom Secteur": secteur[1],
        "Formation Associée": next(f[1] for f in formations if f[0] == secteur[0])
    }
    for secteur in secteurs
]

# Création du DataFrame avec les données
df = pd.DataFrame(correspondance)

# Sauvegarde dans un fichier Excel
df.to_excel("secteurs_formations_association.xlsx", index=False)

print("Le fichier Excel a été créé avec succès.")

pip install groq

import pandas as pd
import yaml
from groq import Groq # Remplacez cela avec la bibliothèque appropriée pour Llama

# Charger les données des secteurs à partir du CSV
df_sectors = pd.read_csv('/content/secteurs_avec_id.csv')  # Remplacez par le chemin de votre CSV

# Liste des formations (ID, nom)
formations = {
    1: 'Agronomy',
    2: 'Electrical Engineering',
    3: 'Architecture',
    4: 'Medicine',
    5: 'Computer Science',
    6: 'Finance',
    7: 'Management',
    8: 'Law',
    9: 'Marketing',
    10: 'Civil Engineering',
    11: 'Chemistry',
    12: 'Aeronautics',
    13: 'Logistics',
    14: 'Urban Planning',
    15: 'Mechanical Engineering',
    16: 'Pharmacy',
    17: 'Biotechnologies',
    18: 'Renewable Energies',
    19: 'Audiovisual',
    20: 'Tourism',
    21: 'Hospitality',
    22: 'Design',
    23: 'Multimedia',
    24: 'Data Science',
    25: 'Artificial Intelligence',
    26: 'Actuarial Science',
    27: 'Petroleum Engineering',
    28: 'Production and Automation',
    29: 'Electronics',
    30: 'Communication',
    31: 'Environmental Sciences',
    32: 'Cosmetics',
    33: 'Agri-food',
    34: 'Networks and Systems',
    35: 'Business Administration',
    36: 'Chemical Engineering',
    37: 'Social Sciences',
    38: 'Psychology',
    39: 'Industrial Engineering',
    40: 'Software Development',
    41: 'Digital Marketing',
    42: 'Human Resources Management',
    43: 'Electromechanics',
    44: 'Energy Engineering',
    45: 'Materials Science'
}

# Configuration de l'API Llama
CONFIG_PATH = r"/content/config.yaml"
api_key = None

# Charger la clé API depuis le fichier YAML
with open(CONFIG_PATH) as file:
    data = yaml.load(file, Loader=yaml.FullLoader)
    api_key = data['GROQ_API_KEY']

# Initialiser le client Groq pour Llama
groq_client = Groq(api_key=api_key)

# Fonction pour interroger Llama et obtenir une formation
def get_training_for_sector(sector_name):
    prompt = f"Associer le secteur '{sector_name}' avec une formation parmi les suivantes : {', '.join(formations.values())}."
    messages = [
        {"role": "system", "content": "Vous êtes un assistant pour associer des secteurs à des formations."},
        {"role": "user", "content": prompt}
    ]

    # Générer la réponse
    response = groq_client.chat.completions.create(
        model="llama3-8b-8192",
        messages=messages,
        temperature=0.0,
        max_tokens=1500
    )

    # Récupérer la réponse
    data = response.choices[0].message.content.strip()

    # Retourner l'ID de la formation associée (par exemple)
    for id_formation, formation in formations.items():
        if formation.lower() in data.lower():
            return id_formation, formation
    return None, None  # Si aucune formation ne correspond

# Créer une nouvelle colonne dans le dataframe pour les résultats
df_sectors['id_formation'] = None
df_sectors['nom_formation'] = None

# Associer chaque secteur à une formation
for idx, row in df_sectors.iterrows():
    sector_name = row['nom_secteur']
    id_formation, formation_name = get_training_for_sector(sector_name)

    # Mettre à jour les colonnes du dataframe
    df_sectors.at[idx, 'id_formation'] = id_formation
    df_sectors.at[idx, 'nom_formation'] = formation_name

# Sauvegarder le résultat dans un fichier Excel
df_sectors.to_excel('secteurs_formations_associées.xlsx', index=False)